;;; init.el --- My Emacs initialization -*- lexical-binding: t -*-

;;; Commentary:

;; Emacs Startup File --- initialization for Emacs
;; Do not edit this file directly!
;; This file is automathically generated by ~org-bable-tangle~ on Emacs.org

;;; Code:

;; Better garbage collection threshold
(setq gc-cons-threshold (* 50 1000 1000))

;; Initialize package sources
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("nongnu" . "https://elpa.nongnu.org/nongnu/")
                         ;("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)

;; UTF-8 everywhere
 (prefer-coding-system 'utf-8)
 (set-default-coding-systems 'utf-8)
 (set-terminal-coding-system 'utf-8)
 (set-keyboard-coding-system 'utf-8)

 ;; User interface
 (menu-bar-mode -1)          ; Disable the menu bar
 (scroll-bar-mode -1)        ; Disable visible scrollbar
 (tool-bar-mode -1)          ; Disable the toolbar
 (tooltip-mode -1)           ; Disable tooltips
 (set-fringe-mode 10)        ; Give some breathing room

 ;; Set up the visible bell
 (setq visible-bell t)

 ;; Calendar stars on monday
 (setq calendar-week-start-day 1)

 ;; Show column numbers in mode line and line numbers on window
 (column-number-mode)
;; (global-display-line-numbers-mode t)
;;
;; ;; Disable line numbers for some modes
;; (dolist (mode '(org-mode-hook
;;                 term-mode-hook
;;                 shell-mode-hook
;;                 treemacs-mode-hook
;;                 eshell-mode-hook
;;                 deft-mode-hook
;;                 org-agenda-mode-hook))
;;   (add-hook mode (lambda () (display-line-numbers-mode 0))))
 ;; Show line numbers only on prog modes
 (add-hook 'prog-mode-hook 'display-line-numbers-mode)  

 ;; When something changes a file, automatically refresh the buffer containing it.
 (global-auto-revert-mode t)

 ;; Visually indicate matching pairs of parentheses.
 (show-paren-mode t)

 ;; Insert closing parenthesis, bracket... pairs automatically
 (electric-pair-mode 1)

 ;; y-or-n answers
 (fset 'yes-or-no-p 'y-or-n-p)	

 ;; global-hl-line-mode softly highlights the background color of the line containing point. It makes it a bit easier to find point, and it’s useful when pairing or presenting code.
 (global-hl-line-mode 1)
 (set-face-attribute hl-line-face nil :underline nil)

 ;; Set tab width to 4 spaces and Allman indentation (bsd) in C
 (setq-default tab-width 4)
 (setq-default indent-tabs-mode nil)
 (setq indent-line-function 'insert-tab)
 (setq c-default-style "bsd"
       c-basic-offset 4)

(setq user-full-name "Patxi Madina")
(cond ((eq system-type 'windows-nt)
       ;; Windows-specific code goes here.
       (setq user-mail-address "pmadina@mondragon.edu"))
      ((eq system-type 'gnu/linux)
       ;; Linux-specific code goes here.
       (setq user-mail-address "pmdn@mailbox.org")
       ))

(defun hrs/append-to-path (path)
  "Add a path both to the $PATH variable and to Emacs' ~exec-path~."
  (setenv "PATH" (concat (getenv "PATH") ":" path))
  (add-to-list 'exec-path path))

;; Custom command stored on its own file
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(when (file-exists-p custom-file)
  (load custom-file))
;; Back-up directories
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))

;; Make ESC quit prompts
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c c") 'org-capture)
(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "C-c h") 'pulse-line)

(use-package doom-themes
 :init (load-theme 'doom-spacegrey t))

(use-package sublime-themes)

(cond ((eq system-type 'windows-nt)
     ;; Windows-specific code goes here.
     ;; Spacing
     (setq-default line-spacing 0.25)
     )
    ((eq system-type 'gnu/linux)
     ;; Linux-specific code goes here.
     ))

;; Utilizar fuentes mono para una mejor alineación
(set-face-attribute 'default nil :font "DejaVu Sans Mono 10")
(set-face-attribute 'fixed-pitch nil :font "DejaVu Sans Mono 10")
(set-face-attribute 'variable-pitch nil :font "DejaVu Sans 10")
(add-to-list 'default-frame-alist '(font . "DejaVu Sans Mono 10"))

(use-package all-the-icons)

(use-package doom-modeline
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 13)
    (doom-modeline-buffer-file-name-style 'truncate-except-project)
    (doom-modeline-bar-width 6)))

;; Diminish minor modes
(use-package diminish
  :ensure t)

;; To show next commands
(use-package which-key
  :defer 0
  :diminish which-key-mode
  :config
  (which-key-mode)
  (setq which-key-idle-delay 0.5))

;; Dashboard configuration
(use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook)
  ; set the title
  (setq dashboard-banner-logo-title "Bienvenido a Emacs!")
  ; set the banner
  (setq dashboard-startup-banner 'logo)
  (setq dashboard-projects-backend 'project-el)
  ; set the sections I'd like displayed and how many of each
  (setq dashboard-items '((recents . 7) (projects . 5) (bookmarks . 5) (agenda . 5)))
  ; center it all
  (setq dashboard-center-content t)
  ; don't show shortcut keys
  (setq dashboard-show-shortcuts t)
  ; use nice icons for the files
  (setq dashboard-set-file-icons t)
  ; use nice section icons
  (setq dashboard-set-heading-icons t)
  ; disable the snarky footer
  (setq dashboard-set-footer nil))

;; Treemacs configuration
(use-package treemacs
  :ensure t
  :defer t
  :bind ("C-c s" . treemacs))

(defun pulse-line (&rest _)
  "Pulse (highlight) the current line."
  (interactive)
  (pulse-momentary-highlight-one-line (point)))

;; Configure orderless
(use-package orderless
  :ensure t
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles basic partial-completion)))))

;; Enable vertico
(use-package vertico
  :init
  (vertico-mode)

  ;; Different scroll margin
  ;; (setq vertico-scroll-margin 0)

  ;; Show more candidates
  ;; (setq vertico-count 20)

  ;; Grow and shrink the Vertico minibuffer
  ;; (setq vertico-resize t)

  ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
  (setq vertico-cycle t)
  )

;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package savehist
  :init
  (savehist-mode))

;; A few more useful configurations...
(use-package emacs
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
                   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                   crm-separator)
                  (car args))
          (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t))

;; Configuration for Consult
(use-package consult
  ;; Replace bindings. Lazily loaded due by `use-package'.
  :bind (;; C-c bindings (mode-specific-map)
         ("C-c h" . consult-history)
         ("C-c m" . consult-mode-command)
         ("C-c k" . consult-kmacro)
         ;; C-x bindings (ctl-x-map)
         ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
         ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
         ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
         ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
         ;; Custom M-# bindings for fast register access
         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
         ("C-M-#" . consult-register)
         ;; Other custom bindings
         ("C-s" . consult-line)
         ("C-c f" . consult-recent-file)
         ("M-y" . consult-yank-pop)                ;; orig. yank-pop
         ("<help> a" . consult-apropos)            ;; orig. apropos-command
         ;; M-g bindings (goto-map)
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
         ("M-g g" . consult-goto-line)             ;; orig. goto-line
         ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ;; M-s bindings (search-map)
         ("M-s d" . consult-find)
         ("M-s D" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s l" . consult-line)
         ("M-s L" . consult-line-multi)
         ("M-s m" . consult-multi-occur)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)
         ;; Isearch integration
         ("M-s e" . consult-isearch-history)
         :map isearch-mode-map
         ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
         ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
         ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
         ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
         ;; Minibuffer history
         :map minibuffer-local-map
         ("M-s" . consult-history)                 ;; orig. next-matching-history-element
         ("M-r" . consult-history))                ;; orig. previous-matching-history-element

  ;; Enable automatic preview at point in the *Completions* buffer. This is
  ;; relevant when you use the default completion UI.
  :hook (completion-list-mode . consult-preview-at-point-mode))

;; Enable rich annotations using the Marginalia package
(use-package marginalia
  ;; Either bind `marginalia-cycle' globally or only in the minibuffer
  :bind (("M-A" . marginalia-cycle)
         :map minibuffer-local-map
         ("M-A" . marginalia-cycle))

  ;; The :init configuration is always executed (Not lazy!)
  :init

  ;; Must be in the :init section of use-package such that the mode gets
  ;; enabled right away. Note that this forces loading the package.
  (marginalia-mode))

(use-package embark
  :ensure t

  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

  :init

  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)

  :config

  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

;; Consult users will also want the embark-consult package.
(use-package embark-consult
  :ensure t
  :after (embark consult)
  :demand t ; only necessary if you have the hook below
  ;; if you want to have consult previews as you move around an
  ;; auto-updating embark collect buffer
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))

;; Enable Corfu
(use-package corfu
  ;; Optional customizations
  :custom
  (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
  (corfu-auto t)                 ;; Enable auto completion
  ;; (corfu-separator ?\s)          ;; Orderless field separator
  ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
  ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
  ;; (corfu-preview-current nil)    ;; Disable current candidate preview
  ;; (corfu-preselect-first nil)    ;; Disable candidate preselection
  ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
  ;; (corfu-echo-documentation nil) ;; Disable documentation in the echo area
  ;; (corfu-scroll-margin 5)        ;; Use scroll margin

  ;; Recommended: Enable Corfu globally.
  ;; This is recommended since Dabbrev can be used globally via  M-/.
  ;; See also `corfu-excluded-modes'.
  :init
  (global-corfu-mode))

;; A few more useful configurations...
(use-package emacs
  :init
  ;; TAB cycle if there are only few candidates
  (setq completion-cycle-threshold 3)

  ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
  ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable indentation+completion using the TAB key.
  ;; `completion-at-point' is often bound to M-TAB.
  (setq tab-always-indent 'complete))

;; Add cape extensions
(use-package cape
  ;; Bind dedicated completion commands
  ;; Alternative prefix keys: C-c p, M-p, M-+, ...
  :bind (("C-c p p" . completion-at-point) ;; capf
         ("C-c p t" . complete-tag)        ;; etags
         ("C-c p d" . cape-dabbrev)        ;; or dabbrev-completion
         ("C-c p h" . cape-history)
         ("C-c p f" . cape-file)
         ("C-c p k" . cape-keyword)
         ("C-c p s" . cape-symbol)
         ("C-c p a" . cape-abbrev)
         ("C-c p i" . cape-ispell)
         ("C-c p l" . cape-line)
         ("C-c p w" . cape-dict)
         ("C-c p \\" . cape-tex)
         ("C-c p _" . cape-tex)
         ("C-c p ^" . cape-tex)
         ("C-c p &" . cape-sgml)
         ("C-c p r" . cape-rfc1345))
  :init
  ;; Add `completion-at-point-functions', used by `completion-at-point'.
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-file)
  ;;(add-to-list 'completion-at-point-functions #'cape-history)
  ;;(add-to-list 'completion-at-point-functions #'cape-keyword)
  ;;(add-to-list 'completion-at-point-functions #'cape-tex)
  ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
  ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
  ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
  ;;(add-to-list 'completion-at-point-functions #'cape-ispell)
  ;;(add-to-list 'completion-at-point-functions #'cape-dict)
  ;;(add-to-list 'completion-at-point-functions #'cape-symbol)
  ;;(add-to-list 'completion-at-point-functions #'cape-line)
)

;; Org mode configuration
(defun efs/org-mode-setup ()
  (org-indent-mode 0)
  (variable-pitch-mode 1)
  (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-date nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-block nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)
  (visual-line-mode 1))

;; Change font size for headings
(with-eval-after-load 'org-faces
  ;; Increase the size of various headings
  (set-face-attribute 'org-document-title nil :font "DejaVu Sans" :weight 'bold :height 1.3)
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "DejaVu Sans" :weight 'regular :height (cdr face))))

(use-package org
  :pin elpa
  :hook (org-mode . efs/org-mode-setup)
  :config
  (setq org-babel-default-header-args
        (cons '(:results . "output verbatim replace")
              (assq-delete-all :results org-babel-default-header-args)))
  (setq org-babel-lisp-eval-fn #'sly-eval)
  (setq org-ellipsis " ▾")
  ;(setq org-adapt-indentation 'headline-data)
  (setq org-hide-emphasis-markers t)
  ;; Fix image width and show inline images
  (setq org-image-actual-width 700)
  (setq org-startup-with-inline-images t)

  (setq org-agenda-start-with-log-mode t)
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)

  (cond ((eq system-type 'windows-nt)
         ;; Windows-specific code goes here.
         (setq org-directory "C:/Dropbox (MGEP)/OrgFiles")
         )
        ((eq system-type 'gnu/linux)
         ;; Linux-specific code goes here.
         (setq org-directory "~/Sync/Sincronizadas/Notes/OrgFiles")
         ))

  (setq org-agenda-files
        (list
         (concat org-directory "/Notas.org")))
  (setq org-archive-location (concat org-directory "/Archivo.org::datetree/"))

  (require 'org-habit)
  (add-to-list 'org-modules 'org-habit)
  (setq org-habit-graph-column 60)

  (setq org-todo-keywords
        '((sequence "TODO(t)" "ACTIVE(a!)" "WAITING(w@/!)" "DELEGATED(d@/!)" "|" "DONE(D!)" "CANCELLED(C@)")
          (sequence "LEYENDO(y)" "|" "LEÍDO(i)")))

  (setq org-todo-keyword-faces
        '(("TODO".(:foreground "DarkSeaGreen" :weight bold))
          ("ACTIVE".(:foreground "LightSeaGreen" :weight bold))
          ("WAITING".(:foreground "peru" :weight bold))
          ("DELEGATED".(:foreground "CornflowerBlue" :weight bold))
          ("DONE".(:foreground "azure" :weight bold))
          ("CANCELLED".(:foreground "IndianRed" :weight bold))
          ("LEYENDO".(:foreground "peru" :weight bold))
          ("LEÍDO".(:foreground "DarkSeaGreen" :weight bold))))

  (setq org-refile-use-outline-path 'file)
  (setq org-outline-path-complete-in-steps nil)
  (setq org-refile-targets
        '(("Archivo.org" :maxlevel . 1)
          (org-agenda-files :maxlevel . 9)))

  (setq org-log-refile 'note)
  ;; Save Org buffers after refiling!
  (advice-add 'org-refile :after 'org-save-all-org-buffers)

  (setq org-tag-alist
        '((:startgroup)
                                        ; Put mutually exclusive tags here
          (:endgroup)
          ("@errand" . ?E)
          ("@home" . ?H)
          ("@work" . ?W)
          ("agenda" . ?a)
          ("planning" . ?p)
          ("publish" . ?P)
          ("batch" . ?b)
          ("note" . ?n)
          ("idea" . ?i)))

  ;; Configure custom agenda views
  (setq org-tags-match-list-sublevels 'indented)
  (setq org-agenda-custom-commands
        '(("d" "Dashboard"
           ((agenda "" ((org-deadline-warning-days 7)))
            (todo "TODO" ((org-agenda-overriding-header "Todo Tasks")))
            (todo "ACTIVE" ((org-agenda-overriding-header "Active Tasks")))
            (todo "WAITING" ((org-agenda-overriding-header "Waiting Tasks")))
            (todo "DELEGATED" ((org-agenda-overriding-header "Delegated Tasks")))))

          ("w" "Workflow Status"
           ((todo "TODO"
                  ((org-agenda-overriding-header "Todo")
                   (org-agenda-files org-agenda-files)))
            (todo "ACTIVE"
                  ((org-agenda-overriding-header "Active Tasks")
                   (org-agenda-files org-agenda-files)))
            (todo "WAITING"
                  ((org-agenda-overriding-header "Waiting on External")
                   (org-agenda-files org-agenda-files)))
            (todo "DELEGATED"
                  ((org-agenda-overriding-header "Delegated on External")
                   (org-agenda-files org-agenda-files)))
            (todo "DONE"
                  ((org-agenda-overriding-header "Completed Tasks")
                   (org-agenda-files org-agenda-files)))
            (todo "CANCELLED"
                  ((org-agenda-overriding-header "Cancelled Tasks")
                   (org-agenda-files org-agenda-files)))))))

  ;; Capture templates
  (setq org-default-notes-file (concat org-directory "/Notas.org"))
  (setq org-capture-templates
        `(("r" "Quick Note" entry (file+olp org-default-notes-file "Inbox")
           "* %?\n  %U\n  %i" :empty-lines 1)
          ("t" "Tasks" entry (file+olp org-default-notes-file "Inbox")
           "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)
          ("b" "Books" entry (file+olp org-default-notes-file "Libros" "Lista Lectura")
           "*** %\\1 %?\n :PROPERTIES:\n :Título: %^{Título}\n :Subtítulo: %^{Subtítulo}\n :Serie: %^{Serie}\n :Autor: %^{Autor [Apellido, Nombre]}\n :Año: %^{Año}\n :Categoría: %^{Categoría}\n :Puntuación: %^{Puntuación [1-5]}\n :Fecha: %^{Fecha Lectura [dd/mm/aaaa]}\n :Estado: %^{Estado|Leído|Leyendo|Pendiente}\n :END: \n" :empty-lines 1 :prepend t)
          ("d" "Notes" entry (file+datetree org-default-notes-file)
           "* %^{Description} %^g %?\nAdded: %U")))

  ;; Set global key for capture
  (define-key global-map (kbd "C-c r")
    (lambda () (interactive) (org-capture nil "r")))
  (define-key global-map (kbd "C-c t")
    (lambda () (interactive) (org-capture nil "t")))
  (define-key global-map (kbd "C-c b")
    (lambda () (interactive) (org-capture nil "b")))
  (define-key global-map (kbd "C-c d")
    (lambda () (interactive) (org-capture nil "d"))))

(use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

(org-babel-do-load-languages
  'org-babel-load-languages
  '((emacs-lisp . t)
    (python . t)
    (lisp . t)      
    (shell . t)))

(push '("conf-unix" . conf-unix) org-src-lang-modes)

(with-eval-after-load 'org
 ;; This is needed as of Org 9.2
 (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("li" . "src lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  ;; For more complicated expansions now ~tempo-define-template must be used. n: newline, p: point after expansion
  (tempo-define-template "org-header"
       '("#+TITLE: " p n
         "#+DESCRITION: " n
         "#+AUTHOR: " n
         "#+SETUPFILE: ./org-html-themes/org/theme-readtheorg-local.setup" n
         "#+TAGS: " n
         "#+STARTUP: overview")
       "<t"
       "Insert an header in the org file"
       'org-tempo-tags))

;; Automatically tangle our Emacs.org config file when we save it
(defun efs/org-babel-tangle-config ()
  (when (string-equal (buffer-file-name)
                      (expand-file-name "~/.dotfiles/.emacs.d/Emacs.org"))
    ;; Dynamic scoping to the rescue
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))

(use-package org-download
  :ensure t
  :custom
    (org-download-method 'directory)
    (org-download-image-dir "images")
    (org-download-heading-lvl nil)
    (org-download-timestamp "%Y%m%d-%H%M%S_")
  :config
  (require 'org-download)
  ;; add support to dired
  (add-hook 'dired-mode-hook 'org-download-enable)
  ;; Add handlers for drag-and-drop when Org is loaded.
  (with-eval-after-load 'org
    (org-download-enable)))

(cond ((eq system-type 'windows-nt)
    ;; Windows-specific code goes here.
     )
    ((eq system-type 'gnu/linux)
     ;; Linux-specific code goes here.
     (use-package org-roam
     :ensure t
     :init
     (setq org-roam-v2-ack t)
     (setq org-roam-node-display-template
       (concat "${title:*} " (propertize "${tags:50}" 'face 'org-tag)))
     :custom
     (org-roam-directory "~/Sync/Sincronizadas/Notes/OrgFiles/RoamNotes")
     (org-roam-completion-everywhere t)
     (org-roam-capture-templates
       '(("d" "default" plain "%?"
         :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U\n")
         :unnarrowed t)))
         :bind (("C-c n l" . org-roam-buffer-toggle)
                ("C-c n f" . org-roam-node-find)
                ("C-c n i" . org-roam-node-insert)
                ("C-c n r" . org-roam-node-random)
                :map org-mode-map
                ("C-M-i"    . completion-at-point)
                ("C-c n o" . org-id-get-create)
                :map org-roam-dailies-map
                ("Y" . org-roam-dailies-capture-yesterday)
                ("T" . org-roam-dailies-capture-tomorrow))
         :bind-keymap
         ("C-c n d" . org-roam-dailies-map)
         :config
         (require 'org-roam-dailies) ;; Ensure the keymap is available
         (org-roam-db-autosync-mode))
        ))

(cond ((eq system-type 'windows-nt)
       ;; Windows-specific code goes here.
       )
      ((eq system-type 'gnu/linux)
       ;; Linux-specific code goes here.
       (use-package deft
         :after org
         :bind
         ("C-c n t" . deft)
         :custom
         (deft-recursive t)
         (deft-use-filename-as-title t)
         (deft-strip-summary-regexp ":PROPERTIES:\n\\(.+\n\\)+:END:\n")
         (deft-use-filter-string-for-filename nil)
         (deft-default-extension "org")
         (deft-directory "~/Sync/Sincronizadas/Notes/OrgFiles/RoamNotes"))
       ))

(cond ((eq system-type 'windows-nt)
       ;; Windows-specific code goes here.
       )
      ((eq system-type 'gnu/linux)
       ;; Linux-specific code goes here.
       (use-package org-roam-ui
         ;;  :straight
         ;;  (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
         :after org-roam
         ;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
         ;;         a hookable mode anymore, you're advised to pick something yourself
         ;;         if you don't care about startup time, use
         ;;  :hook (after-init . org-roam-ui-mode)
         :config
         (setq org-roam-ui-sync-theme t
               org-roam-ui-follow t
               org-roam-ui-update-on-save t
               org-roam-ui-open-on-start nil))
       ))

(use-package eshell
  :init
  (setq eshell-scroll-to-bottom-on-input 'all
        eshell-scroll-show-maximum-output nil
        eshell-error-if-no-glob t
        eshell-hist-ignoredups t
        eshell-save-history-on-exit t
        eshell-prefer-lisp-functions nil
        eshell-destroy-buffer-when-process-dies t)
  ;;Eshell would get somewhat confused if I ran the following commands
  (add-hook 'eshell-mode-hook
            (lambda ()
              (add-to-list 'eshell-visual-commands "ssh")
              (add-to-list 'eshell-visual-commands "tail")
              (add-to-list 'eshell-visual-commands "top"))))

(defun curr-dir-git-branch-string (pwd)
  "Returns current git branch as a string, or the empty string if
PWD is not in a git repo (or the git command is not found)."
  (interactive)
  (when (and (not (file-remote-p pwd))
             (eshell-search-path "git")
             (locate-dominating-file pwd ".git"))
    (let* ((git-url (shell-command-to-string "git config --get remote.origin.url"))
           (git-output (shell-command-to-string (concat "git rev-parse --abbrev-ref HEAD")))
           (git-branch (s-trim git-output))
           (git-icon  "\xe0a0"))
      (concat "[" git-branch "]"))))

(defun pwd-replace-home (pwd)
  "Replace home in PWD with tilde (~) character."
  (interactive)
  (let* ((home (expand-file-name (getenv "HOME")))
         (home-len (length home)))
    (if (and
         (>= (length pwd) home-len)
         (equal home (substring pwd 0 home-len)))
        (concat "~" (substring pwd home-len))
      pwd)))

(defun pwd-shorten-dirs (pwd)
  "Shorten all directory names in PWD except the last two."
  (let ((p-lst (split-string pwd "/")))
    (if (> (length p-lst) 2)
        (concat
         (mapconcat (lambda (elm) (if (zerop (length elm)) ""
                               (substring elm 0 1)))
                    (butlast p-lst 2)
                    "/")
         "/"
         (mapconcat (lambda (elm) elm)
                    (last p-lst 2)
                    "/"))
      pwd)))  ;; Otherwise, we just return the PWD

(defun split-directory-prompt (directory)
  (if (string-match-p ".*/.*" directory)
      (list (file-name-directory directory) (file-name-base directory))
    (list "" directory)))

(defun python-prompt ()
  "Returns a string (may be empty) based on the current Python
   Virtual Environment. Assuming the M-x command: `pyvenv-activate'
   has been called."
  (when (not (eq pyvenv-virtual-env-name 'nil))
    (concat "(" pyvenv-virtual-env-name ")")))

(defun eshell/eshell-local-prompt-function ()
  "A prompt for eshell that works locally (in that is assumes
that it could run certain commands) in order to make a prettier,
more-helpful local prompt."
  (interactive)
  (let* ((pwd        (eshell/pwd))
         (directory (split-directory-prompt
                     (pwd-shorten-dirs
                      (pwd-replace-home pwd))))
         (parent (car directory))
         (name   (cadr directory))
         (branch (curr-dir-git-branch-string pwd))
         (python (when (not (file-remote-p pwd)) (python-prompt)))

         (dark-env (eq 'dark (frame-parameter nil 'background-mode)))
         (for-name  `(:weight bold :foreground "#81A1C1"))
         (for-bars                 `(:weight bold))
         (for-parent  (if dark-env `(:foreground "dark orange") `(:foreground "blue")))
         (for-dir     (if dark-env `(:foreground "orange" :weight bold)
                        `(:foreground "blue" :weight bold)))
         (for-git                  `(:foreground "LightSeaGreen"))
         (for-python               `(:foreground "DarkGrey")))

    (concat
     (propertize (user-login-name) 'face for-name)
     (propertize "@" 'face for-name)
     (propertize (system-name) 'face for-name)
     (propertize " : " 'face for-bars)
     (propertize parent   'face for-parent)
     (propertize name     'face for-dir)
     (when branch
       (concat (propertize " : "    'face for-bars)
               (propertize branch   'face for-git)))
     (when python
       (concat (propertize " : " 'face for-bars)
               (propertize python 'face for-python)))
     ;;(propertize "\n"     'face for-bars)
     (propertize (if (= (user-uid) 0) " #" " $") 'face `(:weight ultra-bold))
     ;; (propertize " └→" 'face (if (= (user-uid) 0) `(:weight ultra-bold :foreground "red") `(:weight ultra-bold)))
     (propertize " "    'face `(:weight bold)))))

(setq-default eshell-prompt-function #'eshell/eshell-local-prompt-function)

(setq eshell-highlight-prompt nil)

(defun eshell-here ()
  "Opens up a new shell in the directory associated with the
    current buffer's file. The eshell is renamed to match that
    directory to make multiple eshell windows easier."
  (interactive)
  (let* ((height (/ (window-total-height) 3)))
    (split-window-vertically (- height))
    (other-window 1)
    (eshell "new")
    (insert (concat "ls"))
    (eshell-send-input)))

(bind-key "C-!" 'eshell-here)

;; Magit for git
(use-package magit
  :ensure t
  :bind (("C-x g" . magit-status)))

;;Git gutter.Show git changes.
(use-package git-gutter
  :ensure t
  :defer 0.3
  :diminish git-gutter-mode
  :delight
  :init (global-git-gutter-mode))

(use-package git-gutter-fringe
  :config
  (define-fringe-bitmap 'git-gutter-fr:added [224] nil nil '(center repeated))
  (define-fringe-bitmap 'git-gutter-fr:modified [224] nil nil '(center repeated))
  (define-fringe-bitmap 'git-gutter-fr:deleted [128 192 224 240] nil nil 'bottom))

;; Easier to see if parenthesis are well closed
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

;; Htmlize. To retain code coloring at html export
(use-package htmlize
  :ensure t)

;; To retain the background color of the used theme

(defun my/org-inline-css-hook (exporter)
  "Insert custom inline css to automatically set the background of code to whatever theme I'm using's background."
  (when (eq exporter 'html)
    (let* ((my-pre-bg (face-background 'default))
           (my-pre-fg (face-foreground 'default)))
      (setq
       org-html-head-extra
       (concat
        org-html-head-extra
        (format "<style type=\"text/css\">\n pre.src {background-color: %s; color: %s;}</style>\n"
                my-pre-bg my-pre-fg))))))

(add-hook 'org-export-before-processing-hook 'my/org-inline-css-hook)

;; Eglot configuration
(cond ((eq system-type 'windows-nt)
       ;; Windows-specific code goes here.
       (use-package eglot
         :ensure t
         :defer t
         :hook ((python-mode . eglot-ensure)
                (c-mode . eglot-ensure)
                (c++-mode . eglot-ensure))
         :config
         (add-to-list 'eglot-server-programs '((c++-mode c-mode) "clangd"))
          ;;Eglot will change the completion-category-defaults. And I can make it work by customizing completion-category-overrides
         (setq completion-category-overrides '((eglot (styles orderless)))))

       )
      ((eq system-type 'gnu/linux)
       ;; Linux-specific code goes here.
       (use-package eglot
         :ensure t
         :defer t
         :hook ((python-mode . eglot-ensure)
                (c-mode . eglot-ensure)
                (c++-mode . eglot-ensure))
         :config
         (add-to-list 'eglot-server-programs '((c++-mode c-mode) "clangd-14"))
                         ;;Eglot will change the completion-category-defaults. And I can make it work by customizing completion-category-overrides
         (setq completion-category-overrides '((eglot (styles orderless)))))

       ))

(cond ((eq system-type 'windows-nt)
     ;; Windows-specific code goes here.
     )
    ((eq system-type 'gnu/linux)
     ;; Linux-specific code goes here.
     (setq org-babel-python-command "python3")
     ))

;; Python mode configuration
(use-package python
  :mode ("\\.py\\'" . python-mode)
        ("\\.wsgi$" . python-mode)
  :interpreter ("python" . python-mode)
  :config
  (setq python-indent-offset 4))

(hrs/append-to-path "~/.local/bin")

;; Pyvenv configuration
(use-package pyvenv
  :ensure t
  :config
  (pyvenv-mode 1))

(use-package py-autopep8
  :hook ((python-mode) . py-autopep8-mode))

(use-package sly
  :ensure t
  :defer t
  :mode "\\.lisp\\'"
  :config
  (setq inferior-lisp-program "sbcl"))

;; Configure Elfeed
(use-package elfeed
  :ensure t
  :defer t
  :config
  (setq elfeed-db-directory (expand-file-name "elfeed" user-emacs-directory)
        elfeed-show-entry-switch 'display-buffer)
  (setq elfeed-search-filter "@1-months-ago +unread")
  :bind
  ("C-x w" . elfeed ))

;; Configure Elfeed with org mode
 (use-package elfeed-org
   :ensure t
   :config
   (elfeed-org)
   (setq rmh-elfeed-org-files (list  (concat org-directory "/elfeed.org"))))

(use-package pdf-tools
  :defer t
  :config
    (pdf-tools-install)
    (setq-default pdf-view-display-size 'fit-width))

  (add-hook 'pdf-view-mode-hook (lambda() (linum-mode -1)))

;; Local Variables:
;; byte-compile-warnings: (not free-vars noruntime)
;; End:

;;; init.el ends here
