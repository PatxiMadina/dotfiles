;; This file is automathically generated by Emacs.org

;; Initialize package sources
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("nongnu" . "https://elpa.nongnu.org/nongnu/") 
                         ;("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)

;; UTF-8 everywhere
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)

;; User interface
(menu-bar-mode -1)          ; Disable the menu bar
(scroll-bar-mode -1)        ; Disable visible scrollbar
(tool-bar-mode -1)          ; Disable the toolbar
(tooltip-mode -1)           ; Disable tooltips
(set-fringe-mode 10)        ; Give some breathing room

;; Set up the visible bell
(setq visible-bell t)

;; Show column numbers in mode line and line numbers on window
(column-number-mode)
(global-display-line-numbers-mode t)

;; Disable line numbers for some modes
(dolist (mode '(org-mode-hook
                term-mode-hook
                shell-mode-hook
                treemacs-mode-hook
                eshell-mode-hook
                deft-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))

;; When something changes a file, automatically refresh the buffer containing it.
(global-auto-revert-mode t)

;; Visually indicate matching pairs of parentheses.
(show-paren-mode t)

;; global-hl-line-mode softly highlights the background color of the line containing point. It makes it a bit easier to find point, and it’s useful when pairing or presenting code.
(global-hl-line-mode 1)
(set-face-attribute hl-line-face nil :underline nil)

;; Set tab width to 4 spaces and Allman indentation (bsd) in C
(setq-default tab-width 4)
(setq-default indent-tabs-mode nil)
(setq indent-line-function 'insert-tab)
(setq c-default-style "bsd"
      c-basic-offset 4)

(setq user-full-name "Patxi Madina"
          user-mail-address "pmdn@mailbox.org")

(defun hrs/append-to-path (path)
  "Add a path both to the $PATH variable and to Emacs' exec-path."
  (setenv "PATH" (concat (getenv "PATH") ":" path))
  (add-to-list 'exec-path path))

;; Custom command stored on its own file
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(when (file-exists-p custom-file)
  (load custom-file))
;; Back-up directories
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))

;; Make ESC quit prompts
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c l") 'org-store-link)

(use-package doom-themes
  :init (load-theme 'doom-nord t))

(use-package sublime-themes)

;; Utilizar fuentes mono para una mejor alineación
    (set-face-attribute 'default nil :font "DejaVu Sans Mono 10")
    (set-face-attribute 'fixed-pitch nil :font "DejaVu Sans Mono 10")
    (set-face-attribute 'variable-pitch nil :font "DejaVu Sans 10")
    (add-to-list 'default-frame-alist '(font . "DejaVu Sans Mono 10"))

(use-package all-the-icons)

(use-package doom-modeline
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 13)
    (doom-modeline-buffer-file-name-style 'truncate-except-project)
    (doom-modeline-bar-width 6)))

;; Diminish minor modes
(use-package diminish
  :ensure t)

;; Ivy / Counsel / Swiper configuration. Counsel contains the rest.
(use-package counsel
  :diminish ivy-mode
  :demand
  :bind (("C-s" . swiper)
	 ("M-x" . counsel-M-x)
	 ("C-x C-f" . counsel-find-file)
	 ("C-c C-r" . iny-resume)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)	
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))

;; Enrich Ivy
(use-package ivy-rich
  :after ivy
  :init
  (ivy-rich-mode 1))

;; To show next commands
(use-package which-key
  :defer 0
  :diminish which-key-mode
  :config
  (which-key-mode)
  (setq which-key-idle-delay 0.5))

(use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook)
  ; set the title
  (setq dashboard-banner-logo-title "Bienvenido a Emacs!")
  ; set the banner
  (setq dashboard-startup-banner 'logo)
  ; set the sections I'd like displayed and how many of each
  (setq dashboard-items '((recents . 5) (projects . 5) (bookmarks . 5) (agenda . 5)))
  ; center it all
  (setq dashboard-center-content t)
  ; don't show shortcut keys
  (setq dashboard-show-shortcuts t)
  ; use nice icons for the files
  (setq dashboard-set-file-icons t)
  ; use nice section icons
  (setq dashboard-set-heading-icons t)
  ; disable the snarky footer
  (setq dashboard-set-footer nil))

(use-package company
  :custom
  (company-idle-delay 0)
  (company-tooltip-align-annotations t)
  :config
  (add-hook 'prog-mode-hook 'company-mode))

;; Org mode configuration
  (defun efs/org-mode-setup ()
    (org-indent-mode 0)
    (variable-pitch-mode 1)
    (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-date nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-block nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)
    (visual-line-mode 1))

;; Change font size for headings
(with-eval-after-load 'org-faces
  ;; Increase the size of various headings
  (set-face-attribute 'org-document-title nil :weight 'bold :height 1.3))
;;	(dolist (face '((org-level-1 . 1.2)
;;					(org-level-2 . 1.1)
;;					(org-level-3 . 1.05)
;;					(org-level-4 . 1.0)
;;					(org-level-5 . 1.1)
;;					(org-level-6 . 1.1)
;;					(org-level-7 . 1.1)
;;					(org-level-8 . 1.1)))
;;	  (set-face-attribute (car face) nil :height (cdr face))))

  (use-package org
    :pin elpa
    :hook (org-mode . efs/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")
    (setq org-adapt-indentation 'headline-data)
;; Fix image width and show inline images
    (setq org-image-actual-width 600)
    (setq org-startup-with-inline-images t)

    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)

    (setq org-agenda-files
          '("~/Sync/Sincronizadas/Notes/OrgFiles/Notas.org"))

    (setq org-archive-location "~/Sync/Sincronizadas/Notes/OrgFiles/Archivo.org::datetree/")

    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60)

    (setq org-todo-keywords
      '((sequence "TODO(t)" "ACTIVE(a!)" "WAITING(w@/!)" "DELEGATED(d@/!)" "|" "DONE(D!)" "CANCELLED(C@)")))

    (setq org-todo-keyword-faces
     '(("TODO".(:foreground "DarkSeaGreen" :weight bold))
       ("ACTIVE".(:foreground "LightSeaGreen" :weight bold))
       ("WAITING".(:foreground "peru" :weight bold))
       ("DELEGATED".(:foreground "CornflowerBlue" :weight bold))
       ("DONE".(:foreground "azure" :weight bold))
       ("CANCELLED".(:foreground "IndianRed" :weight bold))))

   (setq org-refile-use-outline-path 'file)
   (setq org-outline-path-complete-in-steps nil)
    (setq org-refile-targets
      '(("Archivo.org" :maxlevel . 1)
      (org-agenda-files :maxlevel . 9)))

    (setq org-log-refile 'note)
    ;; Save Org buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    (setq org-tag-alist
      '((:startgroup)
         ; Put mutually exclusive tags here
         (:endgroup)
         ("@errand" . ?E)
         ("@home" . ?H)
         ("@work" . ?W)
         ("agenda" . ?a)
         ("planning" . ?p)
         ("publish" . ?P)
         ("batch" . ?b)
         ("note" . ?n)
         ("idea" . ?i)))

    ;; Configure custom agenda views
    (setq org-tags-match-list-sublevels 'indented)
    (setq org-agenda-custom-commands
     '(("d" "Dashboard"
       ((agenda "" ((org-deadline-warning-days 7)))
        (todo "TODO" ((org-agenda-overriding-header "Todo Tasks")))
        (todo "ACTIVE" ((org-agenda-overriding-header "Active Tasks")))
        (todo "WAITING" ((org-agenda-overriding-header "Waiting Tasks")))
        (todo "DELEGATED" ((org-agenda-overriding-header "Delegated Tasks")))))

      ("w" "Workflow Status"
       ((todo "TODO"
              ((org-agenda-overriding-header "Todo")
               (org-agenda-files org-agenda-files)))
        (todo "ACTIVE"
              ((org-agenda-overriding-header "Active Tasks")
               (org-agenda-files org-agenda-files)))
        (todo "WAITING"
              ((org-agenda-overriding-header "Waiting on External")
               (org-agenda-files org-agenda-files)))
        (todo "DELEGATED"
              ((org-agenda-overriding-header "Delegated on External")
               (org-agenda-files org-agenda-files)))
        (todo "DONE"
              ((org-agenda-overriding-header "Completed Tasks")
               (org-agenda-files org-agenda-files)))
        (todo "CANCELLED"
              ((org-agenda-overriding-header "Cancelled Tasks")
               (org-agenda-files org-agenda-files)))))))

    ;; Capture templates
    (setq org-capture-templates
        `(("q" "Quick Note" entry (file+olp "~/Sync/Sincronizadas/Notes/OrgFiles/Notas.org" "Inbox")
         "* %?\n  %U\n  %i" :empty-lines 1)
        ("t" "Tasks" entry (file+olp "~/Sync/Sincronizadas/Notes/OrgFiles/Notas.org" "Inbox")
         "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)
        ("b" "Books" entry (file+olp "~/Sync/Sincronizadas/Notes/OrgFiles/Notas.org" "Libros" "Lista Lectura")
           "*** %\\1 %?\n :PROPERTIES:\n :Título: %^{Título}\n :Subtítulo: %^{Subtítulo}\n :Serie: %^{Serie}\n :Autor: %^{Autor [Apellido, Nombre]}\n :Año: %^{Año}\n :Categoría: %^{Categoría}\n :Puntuación: %^{Puntuación [1-5]}\n :Fecha: %^{Fecha Lectura [dd/mm/aaaa]}\n :Estado: %^{Estado|Leído|Leyendo|Pendiente}\n :END: \n" :empty-lines 1 :prepend t)
        ("d" "Dailies" entry (file+datetree "~/Sync/Sincronizadas/Notes/OrgFiles/Notas.org")
          "* %^{Description} %^g %?\nAdded: %U")))

    ;; Set global key for capture
    (define-key global-map (kbd "C-c q")
      (lambda () (interactive) (org-capture nil "q")))
    (define-key global-map (kbd "C-c t")
      (lambda () (interactive) (org-capture nil "t")))
    (define-key global-map (kbd "C-c b")
      (lambda () (interactive) (org-capture nil "b")))
    (define-key global-map (kbd "C-c d")
      (lambda () (interactive) (org-capture nil "d"))))

(use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

(org-babel-do-load-languages
  'org-babel-load-languages
  '((emacs-lisp . t)
    (python . t)))

(push '("conf-unix" . conf-unix) org-src-lang-modes)

(with-eval-after-load 'org
 ;; This is needed as of Org 9.2
 (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python")))

;; Automatically tangle our Emacs.org config file when we save it
(defun efs/org-babel-tangle-config ()
  (when (string-equal (buffer-file-name)
                      (expand-file-name "~/.dotfiles/.emacs.d/Emacs.org"))
    ;; Dynamic scoping to the rescue
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))

(use-package org-download
  :ensure t
  :custom
    (org-download-method 'directory)
    (org-download-image-dir "images")
    (org-download-heading-lvl nil)
    (org-download-timestamp "%Y%m%d-%H%M%S_")
  :config
  ;; add support to dired
  (add-hook 'dired-mode-hook 'org-download-enable))

(use-package org-roam
  :ensure t
  :init
  (setq org-roam-v2-ack t)
  :custom
  (org-roam-directory "~/Sync/Sincronizadas/Notes/OrgFiles/RoamNotes")
  (org-roam-completion-everywhere t)
  (org-roam-capture-templates
    '(("d" "default" plain "%?"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U\n")
      :unnarrowed t)))
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n i" . org-roam-node-insert)
         ("C-c n r" . org-roam-node-random)	
         :map org-mode-map
         ("C-M-i"    . completion-at-point)
         ("C-c n o" . org-id-get-create)
         :map org-roam-dailies-map
         ("Y" . org-roam-dailies-capture-yesterday)
         ("T" . org-roam-dailies-capture-tomorrow))
  :bind-keymap
  ("C-c n d" . org-roam-dailies-map)
  :config
  (require 'org-roam-dailies) ;; Ensure the keymap is available
  (org-roam-db-autosync-mode))

(use-package deft
  :after org
  :bind
  ("C-c n t" . deft)
  :custom
  (deft-recursive t)
  (deft-use-filename-as-title t)
  (deft-strip-summary-regexp ":PROPERTIES:\n\\(.+\n\\)+:END:\n")
  (deft-use-filter-string-for-filename nil)
  (deft-default-extension "org")
  (deft-directory "~/Sync/Sincronizadas/Notes/OrgFiles/RoamNotes"))

(use-package org-roam-ui
;;  :straight
  ;;  (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
    :after org-roam
;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
;;         a hookable mode anymore, you're advised to pick something yourself
;;         if you don't care about startup time, use
;;  :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start nil))

;; Magit for git
(use-package magit
  :ensure t
  :bind (("C-x g" . magit-status)))

;;Git gutter.Show git changes.
(use-package git-gutter
  :ensure t
  :defer 0.3
  :diminish git-gutter-mode
  :delight
  :init (global-git-gutter-mode))

(use-package git-gutter-fringe
  :config
  (define-fringe-bitmap 'git-gutter-fr:added [224] nil nil '(center repeated))
  (define-fringe-bitmap 'git-gutter-fr:modified [224] nil nil '(center repeated))
  (define-fringe-bitmap 'git-gutter-fr:deleted [128 192 224 240] nil nil 'bottom))

;; Pojectile for working with projects
(use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :custom ((projectile-completion-system 'ivy))
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  ;; NOTE: Set this to the folder where you keep your Git repos!
  (when (file-directory-p "~/Projects/Code")
    (setq projectile-project-search-path '("~/Projects/Code")))
  (setq projectile-switch-project-action #'projectile-dired))

(use-package counsel-projectile
  :after projectile
  :config (counsel-projectile-mode))

;; Easier to see if parenthesis are well closed
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

;; Htmlize. To retain code coloring at html export
(use-package htmlize
  :ensure t)
  
;; To retain the background color of the used theme

(defun my/org-inline-css-hook (exporter)
  "Insert custom inline css to automatically set the
background of code to whatever theme I'm using's background"
  (when (eq exporter 'html)
    (let* ((my-pre-bg (face-background 'default))
           (my-pre-fg (face-foreground 'default)))
      (setq
       org-html-head-extra
       (concat
        org-html-head-extra
        (format "<style type=\"text/css\">\n pre.src {background-color: %s; color: %s;}</style>\n"
                my-pre-bg my-pre-fg))))))

(add-hook 'org-export-before-processing-hook 'my/org-inline-css-hook)

(use-package flycheck
 :init (global-flycheck-mode))

(setq py-interpreter "python3")
(setq elpy-rpc-python-command "python3")
(setq org-babel-python-command "python3")

(use-package python-mode)

(hrs/append-to-path "~/.local/bin")

(use-package elpy)
(elpy-enable)

(add-hook 'elpy-mode-hook 'flycheck-mode)

(use-package py-autopep8)
(require 'py-autopep8)
(add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)

(use-package company-jedi)
(add-to-list 'company-backends 'company-jedi)

(add-hook 'python-mode-hook 'jedi:setup)
(setq jedi:complete-on-dot t)

;; Configure Elfeed
(use-package elfeed
  :ensure t
  :config
  (setq elfeed-db-directory (expand-file-name "elfeed" user-emacs-directory)
        elfeed-show-entry-switch 'display-buffer)
  (setq elfeed-search-filter "@1-months-ago +unread")
  :bind
  ("C-x w" . elfeed ))

;; Configure Elfeed with org mode
 (use-package elfeed-org
   :ensure t
   :config
   (elfeed-org)
   (setq rmh-elfeed-org-files (list "~/Sync/Sincronizadas/Notes/OrgFiles/elfeed.org")))
