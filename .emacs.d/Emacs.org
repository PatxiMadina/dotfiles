#+TITLE: Emacs configuration from org file
#+PROPERTY: header-args:emacs-lisp :tangle ~/.dotfiles/.emacs.d/init.el :mkdirp yes
#+STARTUP: overview

* Welcome

This is my configuration, now written as an Org Mode document.  This file generates [[file:init.el][init.el]] which can be loaded by Emacs at startup.
The configuration is inspired by [[https://github.com/daviwil/emacs-from-scratch][System Crafters]], [[https://config.daviwil.com/emacs][David Wilson]], [[https://github.com/hrs][Harry R. Schwartz]], [[https://github.com/geolessel][Geoffrey Lessel]] and more.

#+begin_src emacs-lisp

  ;;; init.el --- My Emacs initialization -*- lexical-binding: t -*-

  ;;; Commentary:
  
  ;; Emacs Startup File --- initialization for Emacs
  ;; Do not edit this file directly!
  ;; This file is automathically generated by ~org-bable-tangle~ on Emacs.org

  ;;; Code:

#+end_src

* Package System Setup

Emacs has a built in package manager but it doesn't make it easy to automatically install packages on a new system the first time you pull down your configuration.  [[https://github.com/jwiegley/use-package][use-package]] is a really helpful package used in this configuration to make it a lot easier to automate the installation and configuration of everything else we use.

 Syntax example:
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package package-name      ; use the package package-name
    :straight t                  ; use straight to manage it
    :init                        ; execute code BEFORE package load
    (setq foo-variable t)
    :config                      ; execute code AFTER package load
    (foo-mode 1)
  )
#+END_SRC

#+begin_src emacs-lisp

  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("nongnu" . "https://elpa.nongnu.org/nongnu/")
                           ;("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

    ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

#+end_src

* Basic UI Configuration

This section configures basic UI settings that remove unneeded elements to make Emacs look a lot more minimal and modern.  If you're just getting started in Emacs, the menu bar might be helpful so you can remove the =(menu-bar-mode -1)= line if you'd like to still see that.

#+begin_src emacs-lisp

  ;; UTF-8 everywhere
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)

  ;; User interface
  (menu-bar-mode -1)          ; Disable the menu bar
  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room

  ;; Set up the visible bell
  (setq visible-bell t)

  ;; Calendar stars on monday
  (setq calendar-week-start-day 1)

  ;; Show column numbers in mode line and line numbers on window
  (column-number-mode)
 ;; (global-display-line-numbers-mode t)
 ;;
 ;; ;; Disable line numbers for some modes
 ;; (dolist (mode '(org-mode-hook
 ;;                 term-mode-hook
 ;;                 shell-mode-hook
 ;;                 treemacs-mode-hook
 ;;                 eshell-mode-hook
 ;;                 deft-mode-hook
 ;;                 org-agenda-mode-hook))
 ;;   (add-hook mode (lambda () (display-line-numbers-mode 0))))
  ;; Show line numbers only on prog modes
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)  
  
  ;; When something changes a file, automatically refresh the buffer containing it.
  (global-auto-revert-mode t)

  ;; Visually indicate matching pairs of parentheses.
  (show-paren-mode t)

  ;; y-or-n answers
  (fset 'yes-or-no-p 'y-or-n-p)	

  ;; global-hl-line-mode softly highlights the background color of the line containing point. It makes it a bit easier to find point, and it’s useful when pairing or presenting code.
  (global-hl-line-mode 1)
  (set-face-attribute hl-line-face nil :underline nil)

  ;; Set tab width to 4 spaces and Allman indentation (bsd) in C
  (setq-default tab-width 4)
  (setq-default indent-tabs-mode nil)
  (setq indent-line-function 'insert-tab)
  (setq c-default-style "bsd"
        c-basic-offset 4)

#+end_src

* Who am I?

Personal information.

#+BEGIN_SRC emacs-lisp

  (setq user-full-name "Patxi Madina")
  (cond ((eq system-type 'windows-nt)
         ;; Windows-specific code goes here.
         (setq user-mail-address "pmadina@mondragon.edu"))
        ((eq system-type 'gnu/linux)
         ;; Linux-specific code goes here.
         (setq user-mail-address "pmdn@mailbox.org")
         ))

#+END_SRC

* Custom functions

Funtions to be used.

#+BEGIN_SRC  emacs-lisp

(defun hrs/append-to-path (path)
  "Add a path both to the $PATH variable and to Emacs' ~exec-path~."
  (setenv "PATH" (concat (getenv "PATH") ":" path))
  (add-to-list 'exec-path path))

#+END_SRC

* Directory organizing
This sections makes sure the directory stays organized

#+begin_src emacs-lisp

;; Custom command stored on its own file
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(when (file-exists-p custom-file)
  (load custom-file))
;; Back-up directories
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))

#+end_src

* Key bindings

In this section global key bindings are added.

#+begin_src emacs-lisp

  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)
  (global-set-key (kbd "C-c l") 'org-store-link)
#+end_src

* UI configurations

** Color theme

Default themes may be good options:

;(load-theme 'misterioso)

[[https://github.com/hlissner/emacs-doom-themes][doom-themes]] is a great set of themes with a lot of variety and support for many different Emacs modes.  Taking a look at the [[https://github.com/hlissner/emacs-doom-themes/tree/screenshots][screenshots]] might help you decide which one you like best.  You can also run =M-x counsel-load-theme= to choose between them easily.

#+begin_src emacs-lisp

(use-package doom-themes
  :init (load-theme 'doom-nord t))

#+end_src

[[https://github.com/owainlewis/emacs-color-themes][Emacs color themes]]  is a package of themes named after influential programmers. Spolsky is a good one.

#+BEGIN_SRC  emacs-lisp

(use-package sublime-themes)

#+END_SRC

** Fonts

#+begin_src emacs-lisp
  (cond ((eq system-type 'windows-nt)
       ;; Windows-specific code goes here.
       ;; Spacing
       (setq-default line-spacing 0.25)
       )
      ((eq system-type 'gnu/linux)
       ;; Linux-specific code goes here.
       ))
 
  ;; Utilizar fuentes mono para una mejor alineación
  (set-face-attribute 'default nil :font "DejaVu Sans Mono 10")
  (set-face-attribute 'fixed-pitch nil :font "DejaVu Sans Mono 10")
  (set-face-attribute 'variable-pitch nil :font "DejaVu Sans 10")
  (add-to-list 'default-frame-alist '(font . "DejaVu Sans Mono 10"))
#+end_src

** Better Modeline

[[https://github.com/seagle0128/doom-modeline][doom-modeline]] is a very attractive and rich (yet still minimal) mode line configuration for Emacs.  The default configuration is quite good but you can check out the [[https://github.com/seagle0128/doom-modeline#customize][configuration options]] for more things you can enable or disable.

*NOTE:* The first time you load your configuration on a new machine, you'll need to run `M-x all-the-icons-install-fonts` so that mode line icons display correctly.

#+begin_src emacs-lisp

(use-package all-the-icons)

(use-package doom-modeline
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 13)
    (doom-modeline-buffer-file-name-style 'truncate-except-project)
    (doom-modeline-bar-width 6)))

#+end_src
** Diminish  

[[https://github.com/emacsmirror/diminish][Diminish]] implements hiding or abbreviation of the mode line displays (lighters) of minor-modes.

#+begin_src emacs-lisp

;; Diminish minor modes
(use-package diminish
  :ensure t)

#+end_src

** Ivy

[[https://oremacs.com/swiper/][Ivy]] is an excellent completion framework for Emacs.  It provides a minimal yet powerful selection menu that appears when you open files, switch buffers, and for many other tasks in Emacs.  Counsel is a customized set of commands to replace `find-file` with `counsel-find-file`, etc which provide useful commands for each of the default completion commands.

[[https://github.com/Yevgnen/ivy-rich][ivy-rich]] adds extra columns to a few of the Counsel commands to provide more information about each item.

#+begin_src emacs-lisp

;; Ivy / Counsel / Swiper configuration. Counsel contains the rest.
(use-package counsel
  :diminish ivy-mode
  :demand
  :bind (("C-s" . swiper)
	 ("M-x" . counsel-M-x)
	 ("C-x C-f" . counsel-find-file)
	 ("C-c C-r" . iny-resume)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))

;; Enrich Ivy
(use-package ivy-rich
  :after ivy
  :init
  (ivy-rich-mode 1))

#+end_src

** Which Key

[[https://github.com/justbur/emacs-which-key][which-key]] is a useful UI panel that appears when you start pressing any key binding in Emacs to offer you all possible completions for the prefix.  For example, if you press =C-c= (hold control and press the letter =c=), a panel will appear at the bottom of the frame displaying all of the bindings under that prefix and which command they run.  This is very useful for learning the possible key bindings in the mode of your current buffer.

#+begin_src emacs-lisp

;; To show next commands
(use-package which-key
  :defer 0
  :diminish which-key-mode
  :config
  (which-key-mode)
  (setq which-key-idle-delay 0.5))

#+end_src

** Dashboard

[[https://github.com/emacs-dashboard/emacs-dashboard][Dashboard]] is an extensible emacs startup screen showing you what’s most important.

#+BEGIN_SRC emacs-lisp
  ;; Dashboard configuration
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    ; set the title
    (setq dashboard-banner-logo-title "Bienvenido a Emacs!")
    ; set the banner
    (setq dashboard-startup-banner 'logo)
    ; set the sections I'd like displayed and how many of each
    (setq dashboard-items '((recents . 5) (projects . 5) (bookmarks . 5) (agenda . 5)))
    ; center it all
    (setq dashboard-center-content t)
    ; don't show shortcut keys
    (setq dashboard-show-shortcuts t)
    ; use nice icons for the files
    (setq dashboard-set-file-icons t)
    ; use nice section icons
    (setq dashboard-set-heading-icons t)
    ; disable the snarky footer
    (setq dashboard-set-footer nil))

#+END_SRC

** Company

[[https://company-mode.github.io/][Company]] is a text completion framework for Emacs. The name stands for "complete anything". It uses pluggable back-ends and front-ends to retrieve and display completion candidates.

#+BEGIN_SRC  emacs-lisp

  ;; Company completion framework configuration
  (use-package company
    :custom
    (company-idle-delay 0)
    (company-tooltip-align-annotations t)
    :config
    (add-hook 'prog-mode-hook 'company-mode))


#+END_SRC

** Treemacs

[[https://github.com/Alexander-Miller/treemacs][Treemacs]] is a a file and project explorer in tree mode for quick navigation and exploration.

#+begin_src emacs-lisp

  ;; Treemacs configuration
  (use-package treemacs
    :ensure t
    :defer t
    :bind ("C-c s" . treemacs))
  
#+end_src

* Org Mode

[[https://orgmode.org/][Org Mode]] is one of the hallmark features of Emacs.  It is a rich document editor, project planner, task and time tracker, blogging engine, and literate coding utility all wrapped up in one package.

** Basic Config

This section contains the basic configuration for =org-mode=, including agenda, capture and refile.

Some inspiration from:
- https://paul-nameless.com/emacs-org-mode-100-books.html
- https://stackoverflow.com/questions/2581935/import-csv-into-org-mode-properties
- https://victorianoi.notion.site/


#+begin_src emacs-lisp

  ;; Org mode configuration
  (defun efs/org-mode-setup ()
    (org-indent-mode 0)
    (variable-pitch-mode 1)
    (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-date nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-block nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)
    (visual-line-mode 1))

  ;; Change font size for headings
  (with-eval-after-load 'org-faces
    ;; Increase the size of various headings
    (set-face-attribute 'org-document-title nil :font "DejaVu Sans" :weight 'bold :height 1.3)
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "DejaVu Sans" :weight 'regular :height (cdr face))))

  (use-package org
    :pin elpa
    :hook (org-mode . efs/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")
    ;(setq org-adapt-indentation 'headline-data)
    (setq org-hide-emphasis-markers t)
    ;; Fix image width and show inline images
    (setq org-image-actual-width 700)
    (setq org-startup-with-inline-images t)

    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)

    (cond ((eq system-type 'windows-nt)
           ;; Windows-specific code goes here.
           (setq org-directory "C:/Dropbox (MGEP)/OrgFiles")
           )
          ((eq system-type 'gnu/linux)
           ;; Linux-specific code goes here.
           (setq org-directory "~/Sync/Sincronizadas/Notes/OrgFiles")
           ))

    (setq org-agenda-files
          (list
           (concat org-directory "/Notas.org")))
    (setq org-archive-location (concat org-directory "/Archivo.org::datetree/"))

    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60)

    (setq org-todo-keywords
          '((sequence "TODO(t)" "ACTIVE(a!)" "WAITING(w@/!)" "DELEGATED(d@/!)" "|" "DONE(D!)" "CANCELLED(C@)")
            (sequence "LEYENDO(y)" "|" "LEÍDO(i)")))

    (setq org-todo-keyword-faces
          '(("TODO".(:foreground "DarkSeaGreen" :weight bold))
            ("ACTIVE".(:foreground "LightSeaGreen" :weight bold))
            ("WAITING".(:foreground "peru" :weight bold))
            ("DELEGATED".(:foreground "CornflowerBlue" :weight bold))
            ("DONE".(:foreground "azure" :weight bold))
            ("CANCELLED".(:foreground "IndianRed" :weight bold))
            ("LEYENDO".(:foreground "peru" :weight bold))
            ("LEÍDO".(:foreground "DarkSeaGreen" :weight bold))))

    (setq org-refile-use-outline-path 'file)
    (setq org-outline-path-complete-in-steps nil)
    (setq org-refile-targets
          '(("Archivo.org" :maxlevel . 1)
            (org-agenda-files :maxlevel . 9)))

    (setq org-log-refile 'note)
    ;; Save Org buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    (setq org-tag-alist
          '((:startgroup)
                                          ; Put mutually exclusive tags here
            (:endgroup)
            ("@errand" . ?E)
            ("@home" . ?H)
            ("@work" . ?W)
            ("agenda" . ?a)
            ("planning" . ?p)
            ("publish" . ?P)
            ("batch" . ?b)
            ("note" . ?n)
            ("idea" . ?i)))

    ;; Configure custom agenda views
    (setq org-tags-match-list-sublevels 'indented)
    (setq org-agenda-custom-commands
          '(("d" "Dashboard"
             ((agenda "" ((org-deadline-warning-days 7)))
              (todo "TODO" ((org-agenda-overriding-header "Todo Tasks")))
              (todo "ACTIVE" ((org-agenda-overriding-header "Active Tasks")))
              (todo "WAITING" ((org-agenda-overriding-header "Waiting Tasks")))
              (todo "DELEGATED" ((org-agenda-overriding-header "Delegated Tasks")))))

            ("w" "Workflow Status"
             ((todo "TODO"
                    ((org-agenda-overriding-header "Todo")
                     (org-agenda-files org-agenda-files)))
              (todo "ACTIVE"
                    ((org-agenda-overriding-header "Active Tasks")
                     (org-agenda-files org-agenda-files)))
              (todo "WAITING"
                    ((org-agenda-overriding-header "Waiting on External")
                     (org-agenda-files org-agenda-files)))
              (todo "DELEGATED"
                    ((org-agenda-overriding-header "Delegated on External")
                     (org-agenda-files org-agenda-files)))
              (todo "DONE"
                    ((org-agenda-overriding-header "Completed Tasks")
                     (org-agenda-files org-agenda-files)))
              (todo "CANCELLED"
                    ((org-agenda-overriding-header "Cancelled Tasks")
                     (org-agenda-files org-agenda-files)))))))

    ;; Capture templates
    (setq org-capture-templates
          `(("r" "Quick Note" entry (file+olp (concat org-directory "/Notas.org") "Inbox")
             "* %?\n  %U\n  %i" :empty-lines 1)
            ("t" "Tasks" entry (file+olp (concat org-directory "/Notas.org") "Inbox")
             "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)
            ("b" "Books" entry (file+olp (concat org-directory "/Notas.org") "Libros" "Lista Lectura")
             "*** %\\1 %?\n :PROPERTIES:\n :Título: %^{Título}\n :Subtítulo: %^{Subtítulo}\n :Serie: %^{Serie}\n :Autor: %^{Autor [Apellido, Nombre]}\n :Año: %^{Año}\n :Categoría: %^{Categoría}\n :Puntuación: %^{Puntuación [1-5]}\n :Fecha: %^{Fecha Lectura [dd/mm/aaaa]}\n :Estado: %^{Estado|Leído|Leyendo|Pendiente}\n :END: \n" :empty-lines 1 :prepend t)
            ("n" "Notes" entry (file+datetree (concat org-directory "/Notas.org"))
             "* %^{Description} %^g %?\nAdded: %U")))

    ;; Set global key for capture
    (define-key global-map (kbd "C-c r")
      (lambda () (interactive) (org-capture nil "r")))
    (define-key global-map (kbd "C-c t")
      (lambda () (interactive) (org-capture nil "t")))
    (define-key global-map (kbd "C-c b")
      (lambda () (interactive) (org-capture nil "b")))
    (define-key global-map (kbd "C-c d")
      (lambda () (interactive) (org-capture nil "d"))))

#+end_src

** Nicer Heading Bullets

[[https://github.com/sabof/org-bullets][org-bullets]] replaces the heading stars in =org-mode= buffers with nicer looking characters that you can control.  Another option for this is [[https://github.com/integral-dw/org-superstar-mode][org-superstar-mode]].

#+begin_src emacs-lisp

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

** Configure Babel Languages

To execute or export code in =org-mode= code blocks, you'll need to set up =org-babel-load-languages= for each language you'd like to use.  [[https://orgmode.org/worg/org-contrib/babel/languages.html][This page]] documents all of the languages that you can use with =org-babel=.

#+begin_src emacs-lisp

    (org-babel-do-load-languages
      'org-babel-load-languages
      '((emacs-lisp . t)
        (python . t)
        (shell . t)))

    (push '("conf-unix" . conf-unix) org-src-lang-modes)

#+end_src

** Structure Templates

Org Mode's [[https://orgmode.org/manual/Structure-Templates.html][structure templates]] feature enables you to quickly insert code blocks into your Org files in combination with =org-tempo= by typing =<= followed by the template name like =el= or =py= and then press =TAB=.  For example, to insert an empty =emacs-lisp= block below, you can type =<el= and press =TAB= to expand into such a block.

You can add more =src= block templates below by copying one of the lines and changing the two strings at the end, the first to be the template name and the second to contain the name of the language [[https://orgmode.org/worg/org-contrib/babel/languages.html][as it is known by Org Babel]].

#+begin_src emacs-lisp

  (with-eval-after-load 'org
   ;; This is needed as of Org 9.2
   (require 'org-tempo)

    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    ;; For more complicated expansions now ~tempo-define-template must be used. n: newline, p: point after expansion
    (tempo-define-template "org-header"
         '("#+TITLE: " p n
           "#+DESCRITION: " n
           "#+AUTHOR: " n
           "#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup" n
           "#+TAGS: " n
           "#+STARTUP: overview")
         "<t"
         "Insert an header in the org file"
         'org-tempo-tags))

#+end_src

** Auto-tangle Configuration Files

This snippet adds a hook to =org-mode= buffers so that =efs/org-babel-tangle-config= gets executed each time such a buffer gets saved.  This function checks to see if the file being saved is the Emacs.org file you're looking at right now, and if so, automatically exports the configuration here to the associated output files.

#+begin_src emacs-lisp

  ;; Automatically tangle our Emacs.org config file when we save it
  (defun efs/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/.dotfiles/.emacs.d/Emacs.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))

#+end_src

** Org download

[[https://github.com/abo-abo/org-download][org-download]]  facilitates inserting images into org files.

#+BEGIN_SRC  emacs-lisp

  (use-package org-download
    :ensure t
    :custom
      (org-download-method 'directory)
      (org-download-image-dir "images")
      (org-download-heading-lvl nil)
      (org-download-timestamp "%Y%m%d-%H%M%S_")
    :config
    (require 'org-download)
    ;; add support to dired
    (add-hook 'dired-mode-hook 'org-download-enable)
    ;; Add handlers for drag-and-drop when Org is loaded.
    (with-eval-after-load 'org
      (org-download-enable)))

#+END_SRC

** Org roam

The [[https://www.orgroam.com/][Org-Roam]] package extends the Org mode functionality by saving all the links between files and headings in a database. This method allows you to also view the backlinks. The database stores a list of nodes, which are files or registered headings. This additional functionality allows you to navigate through your network of notes like you would in a personal wiki. It's inspired by a program called [[https://roamresearch.com/][Roam]] and a note-taking strategy called [[https://en.wikipedia.org/wiki/Zettelkasten][Zettelkasten]] where the goal is to create many individual single-topic notes that are linked together to create a "networked" knowledge base. 

Org Roam v2 depends on a customized build of the SQLite database tool to operate. Org Roam will take care of compiling this code for you as long as you have a compatible compiler installed!

For Linux and macOS users, make sure you have a C/C++ compiler like gcc or clang installed.

Also make sure that the directories =RoamNotes= and =daily= inside it exist.

#+begin_src emacs-lisp

  (cond ((eq system-type 'windows-nt)
      ;; Windows-specific code goes here.
       )
      ((eq system-type 'gnu/linux)
       ;; Linux-specific code goes here.
       (use-package org-roam
       :ensure t
       :init
       (setq org-roam-v2-ack t)
       (setq org-roam-node-display-template
         (concat "${title:*} " (propertize "${tags:50}" 'face 'org-tag)))
       :custom
       (org-roam-directory "~/Sync/Sincronizadas/Notes/OrgFiles/RoamNotes")
       (org-roam-completion-everywhere t)
       (org-roam-capture-templates
         '(("d" "default" plain "%?"
           :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U\n")
           :unnarrowed t)))
           :bind (("C-c n l" . org-roam-buffer-toggle)
                  ("C-c n f" . org-roam-node-find)
                  ("C-c n i" . org-roam-node-insert)
                  ("C-c n r" . org-roam-node-random)
                  :map org-mode-map
                  ("C-M-i"    . completion-at-point)
                  ("C-c n o" . org-id-get-create)
                  :map org-roam-dailies-map
                  ("Y" . org-roam-dailies-capture-yesterday)
                  ("T" . org-roam-dailies-capture-tomorrow))
           :bind-keymap
           ("C-c n d" . org-roam-dailies-map)
           :config
           (require 'org-roam-dailies) ;; Ensure the keymap is available
           (org-roam-db-autosync-mode))
          ))


#+end_src

** Deft

[[https://jblevins.org/projects/deft/][Deft]] provides a nice interface for browsing and filtering org-roam notes.

#+begin_src emacs-lisp

  (cond ((eq system-type 'windows-nt)
       ;; Windows-specific code goes here.
       )
      ((eq system-type 'gnu/linux)
       ;; Linux-specific code goes here.
       (use-package deft
       :after org
       :bind
       ("C-c n t" . deft)
       :custom
       (deft-recursive t)
       (deft-use-filename-as-title t)
       (deft-strip-summary-regexp ":PROPERTIES:\n\\(.+\n\\)+:END:\n")
       (deft-use-filter-string-for-filename nil)
       (deft-default-extension "org")
       (deft-directory "~/Sync/Sincronizadas/Notes/OrgFiles/RoamNotes"))
       ))

#+end_src

** Org-roam-ui

[[https://github.com/org-roam/org-roam-ui][Org-roam-ui]] provides a graphical interface to interact with the linked nodes.

Use ~M-x org-roam-ui-mode RET~ to enable the global mode. It will start a web server on http://127.0.0.1:35901/ and connect to it via a WebSocket for real-time updates.

#+begin_src emacs-lisp

  (cond ((eq system-type 'windows-nt)
       ;; Windows-specific code goes here.
       )
      ((eq system-type 'gnu/linux)
       ;; Linux-specific code goes here.
       (use-package org-roam-ui
       ;;  :straight
       ;;  (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
       :after org-roam
       ;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
       ;;         a hookable mode anymore, you're advised to pick something yourself
       ;;         if you don't care about startup time, use
       ;;  :hook (after-init . org-roam-ui-mode)
       :config
       (setq org-roam-ui-sync-theme t
             org-roam-ui-follow t
             org-roam-ui-update-on-save t
             org-roam-ui-open-on-start nil))
       ))

#+end_src

* Development

** Magit

[[https://magit.vc/][Magit]] is the best Git interface I've ever used.  Common Git operations are easy to execute quickly using Magit's command panel system.

#+BEGIN_SRC emacs-lisp

  ;; Magit for git
  (use-package magit
    :ensure t
    :bind (("C-x g" . magit-status)))

#+END_SRC

** GitGutter

[[https://github.com/emacsorphanage/git-gutter][GitGutter]] is a pluggin to show information about files in a git repository. [[https://ianyepan.github.io/posts/emacs-git-gutter/][Here]] is a modern looking config using [[https://github.com/emacsorphanage/git-gutter-fringe][git-gutter-fringe]].

#+BEGIN_SRC emacs-lisp

  ;;Git gutter.Show git changes.
  (use-package git-gutter
    :ensure t
    :defer 0.3
    :diminish git-gutter-mode
    :delight
    :init (global-git-gutter-mode))

  (use-package git-gutter-fringe
    :config
    (define-fringe-bitmap 'git-gutter-fr:added [224] nil nil '(center repeated))
    (define-fringe-bitmap 'git-gutter-fr:modified [224] nil nil '(center repeated))
    (define-fringe-bitmap 'git-gutter-fr:deleted [128 192 224 240] nil nil 'bottom))

#+END_SRC

** Rainbow delimiter

[[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] is useful in programming modes because it colorizes nested parentheses and brackets according to their nesting depth.  This makes it a lot easier to visually match parentheses in Emacs Lisp code without having to count them yourself.

#+BEGIN_SRC emacs-lisp

  ;; Easier to see if parenthesis are well closed
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+END_SRC

** Htmlize

[[https://github.com/hniksic/emacs-htmlize][Htmlize]] converts the buffer text and the associated decorations to HTML

#+BEGIN_SRC emacs-lisp

  ;; Htmlize. To retain code coloring at html export
  (use-package htmlize
    :ensure t)
  
  ;; To retain the background color of the used theme

  (defun my/org-inline-css-hook (exporter)
    "Insert custom inline css to automatically set the background of code to whatever theme I'm using's background."
    (when (eq exporter 'html)
      (let* ((my-pre-bg (face-background 'default))
             (my-pre-fg (face-foreground 'default)))
        (setq
         org-html-head-extra
         (concat
          org-html-head-extra
          (format "<style type=\"text/css\">\n pre.src {background-color: %s; color: %s;}</style>\n"
                  my-pre-bg my-pre-fg))))))

  (add-hook 'org-export-before-processing-hook 'my/org-inline-css-hook)

#+END_SRC

** Eglot

Using [[https://github.com/joaotavora/eglot][eglot]], a language server protocol (LSP) for Emacs.
Make sure servers for the different languajes are installed:
On Linux
- pyright: ~pip3 install pyright~
- clangd: ~sudo apt -y install clangd-14~
On Windows
- python language server: ~pip install python-language-server[all]~
- clangd: install the [[https://github.com/llvm/llvm-project/releases/download/llvmorg-14.0.6/LLVM-14.0.6-win64.exe][executable]].

#+begin_src emacs-lisp

  ;; Eglot configuration
  (cond ((eq system-type 'windows-nt)
         ;; Windows-specific code goes here.
         (use-package eglot
         :ensure t
         :defer t
         :hook ((python-mode . eglot-ensure)
                (c-mode . eglot-ensure)
                (c++-mode . eglot-ensure))
         :config
         (add-to-list 'eglot-server-programs '((c++-mode c-mode) "clangd")))

         )
        ((eq system-type 'gnu/linux)
         ;; Linux-specific code goes here.
         (use-package eglot
         :ensure t
         :defer t
         :hook ((python-mode . eglot-ensure)
                (c-mode . eglot-ensure)
                (c++-mode . eglot-ensure))
         :config
         (add-to-list 'eglot-server-programs '((c++-mode c-mode) "clangd-14")))

         ))

#+end_src

** Python

Make sure you install virtualenv by: ~sudo apt install virtualenv~
Or: ~python3 -m pip install virtualenv~
And; ~apt install python3.10-venv~
Also install pip: ~sudo apt install python3-pip~
And also install pep8: ~pip3 install autopep8~
And jedi: ~pip3 install jedi~ 
And flake8: ~sudo apt install flake8~

I initially used elpy as described in this tutorial https://realpython.com/emacs-the-best-python-editor/.

On 2022/08/04 I changed to [[https://github.com/joaotavora/eglot][eglot]]. Configuration examples used:
- https://gist.github.com/Nathan-Furnal/b327f14e861f009c014af36c1790ec49
- https://www.reddit.com/r/emacs/comments/ushfzn/comment/ii0pbg7/?utm_source=share&utm_medium=web2x&context=3
- https://cestlaz.github.io/post/using-emacs-74-eglot/

Set org-babel to python 3.

#+BEGIN_SRC  emacs-lisp

  (cond ((eq system-type 'windows-nt)
       ;; Windows-specific code goes here.
       )
      ((eq system-type 'gnu/linux)
       ;; Linux-specific code goes here.
       (setq org-babel-python-command "python3")
       ))

#+END_SRC

Use the built in python.el package.

#+begin_src emacs-lisp

  ;; Python mode configuration
  (use-package python
    :mode ("\\.py\\'" . python-mode)
          ("\\.wsgi$" . python-mode)
    :interpreter ("python" . python-mode)
    :config
    (setq python-indent-offset 4))

#+end_src

Add =~/.local/bin= to load path. That’s where ~virtualenv~ is installed, and we’ll need that for ~jedi~. Check with ~which virtualenv~ on the shell.

#+BEGIN_SRC  emacs-lisp

  (hrs/append-to-path "~/.local/bin")

#+END_SRC

[[https://github.com/jorgenschaefer/pyvenv][pyvenv]] for virtual environments. Use ~M-x pyvenv-workon~ to select a virtual env and then ~M-x eglot~.

#+begin_src emacs-lisp

  ;; Pyvenv configuration
  (use-package pyvenv
    :ensure t
    :init
    (setenv "WORKON_HOME" "~/.pyenv/versions")
    :config
    (pyvenv-mode 1))

#+end_src

Format code according to PEP8 on save with [[https://github.com/emacsmirror/py-autopep8][py-autopep8]]:

#+begin_src emacs-lisp

  (use-package py-autopep8
    :hook ((python-mode) . py-autopep8-mode))

#+end_src

* RSS with Elfeed

 [[https://github.com/skeeto/elfeed][Elfeed]] is a RSS reader integrated in Emacs. Together with [[https://github.com/remyhonig/elfeed-org][Elfeed-org]] makes adding feeds and reading them a joy.

#+BEGIN_SRC emacs-lisp

  ;; Configure Elfeed
  (use-package elfeed
    :ensure t
    :config
    (setq elfeed-db-directory (expand-file-name "elfeed" user-emacs-directory)
          elfeed-show-entry-switch 'display-buffer)
    (setq elfeed-search-filter "@1-months-ago +unread")
    :bind
    ("C-x w" . elfeed ))

  ;; Configure Elfeed with org mode
   (use-package elfeed-org
     :ensure t
     :config
     (elfeed-org)
     (setq rmh-elfeed-org-files (list  (concat org-directory "/elfeed.org"))))

#+END_SRC

* Pdf files with pdf-tools

[[https://github.com/vedang/pdf-tools][pdf-tools]] is a package to view and anotate pdf files inside emacs. Configuration taken from [[https://gitlab.com/hefistion/emacs.d/-/blob/master/config.org][El blog de Lázaro]].

To install on Windows: [[https://github.com/nobiot/Zero-to-Emacs-and-Org-roam/blob/v1/100.pdf-tools-org-noter.md][Instructions.]]

The key is:

- Use https://www.msys2.org/ as a build tool to compile necessary software pieces from sources

- Do NOT follow the official Windows instruction to the letter on PDF-tools GitHub page (https://github.com/politza/pdf-tools)

- Instead of using "msys2 shell" (as instructed), build (compile) PDF-Tools from within Emacs


1) Install MSYS2 

Go to MSYS2 from its website at https://www.msys2.org/.

Download the installer, execute it to install MSYS2. You can follow the rest of the instruction, but for PDF-Tools, you may not have to do much more than installing MSYS2. I did not even call ~pacman Syu~ to update the package database (I think it would be a good idea to do that so that you can get the latest version of the packages).

2) Install PDF-Tools in Emacs

Launch Emacs. Install =pdf-tools= from MELPA, or any mechanism you use.

MSYS2 has its own Emacs in its package database, but you don't need to use it. The normal Emacs that you download from the GNU Emacs site, as described in the previous chapters of this guide, works fine.

3) Build (Compile) program files required by PDF-Tools

Don't worry, it needs one manual trigger and automatic. Within Emacs, call ~M-x pdf-tools-install RET~ to start automatic build. Then wait.

When Emacs prompts for your input, take the default option and say "yes" to the questions.

This will automatically start to build (compile) software files (=.dll= and =.exe= files). It took me about 30 minutes; the duration will vary depending on how good your PC is. New files will appear in the =pdf-tools= sub-folder in your =~/.emacs.d/elpa= folder.

Now you should be able to open PDF files with PDF-Tools. To do so, simply visit a PDF document like any other file via ~C-x C-f~; Emacs should open the PDF document in "PDFView" mode with PDF-Tools.

4) Add a one-line configuration in your =.emacs= config file

Add ~(pdf-tools-install)~ or ~(pdf-loader-install)~ in your config file, following the official instruction on PDF-Tools.

This is it. You should be able to quit Emacs, launch it again, and open a PDF file with PDF-Tools within Emacs.


#+begin_src emacs-lisp

  (use-package pdf-tools
      :config
      (pdf-tools-install)
      (setq-default pdf-view-display-size 'fit-width))

    (add-hook 'pdf-view-mode-hook (lambda() (linum-mode -1)))
  
#+end_src

* Finish line

#+begin_src emacs-lisp

  ;; Local Variables:
  ;; byte-compile-warnings: (not free-vars noruntime)
  ;; End:
  
  ;;; init.el ends here

#+end_src
