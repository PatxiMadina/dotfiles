#+TITLE: Emacs configuration from or file
#+PROPERTY: header-args:emacs-lisp :tangle ~/.dotfiles/.emacs.d/init.el :mkdirp yes

* Welcome

This is my configuration, now written as an Org Mode document.  This file generates [[file:init.el][init.el]] which can be loaded by Emacs at startup.
The configuration is inspired by [[https://github.com/daviwil/emacs-from-scratch][System Crafters]], [[https://github.com/hrs][Harry R. Schwartz]], [[https://github.com/geolessel][Geoffrey Lessel]] and more.

#+begin_src emacs-lisp

 ;; This file is automathically generated by Emacs.org

#+end_src

* Package System Setup

Emacs has a built in package manager but it doesn't make it easy to automatically install packages on a new system the first time you pull down your configuration.  [[https://github.com/jwiegley/use-package][use-package]] is a really helpful package used in this configuration to make it a lot easier to automate the installation and configuration of everything else we use.

 Syntax example:
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package package-name      ; use the package package-name
    :straight t                  ; use straight to manage it
    :init                        ; execute code BEFORE package load
    (setq foo-variable t)
    :config                      ; execute code AFTER package load
    (foo-mode 1)
  )
#+END_SRC

#+begin_src emacs-lisp

;; Initialize package sources
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)

#+end_src

* Basic UI Configuration

This section configures basic UI settings that remove unneeded elements to make Emacs look a lot more minimal and modern.  If you're just getting started in Emacs, the menu bar might be helpful so you can remove the =(menu-bar-mode -1)= line if you'd like to still see that.

#+begin_src emacs-lisp

;; UTF-8 everywhere
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)

;; User interface
(menu-bar-mode -1)          ; Disable the menu bar
(scroll-bar-mode -1)        ; Disable visible scrollbar
(tool-bar-mode -1)          ; Disable the toolbar
(tooltip-mode -1)           ; Disable tooltips
(set-fringe-mode 10)        ; Give some breathing room

;; Set up the visible bell
(setq visible-bell t)

;; Show column numbers in mode line and line numbers on window
(column-number-mode)
(global-display-line-numbers-mode t)

;; Disable line numbers for some modes
(dolist (mode '(org-mode-hook
                term-mode-hook
                shell-mode-hook
                treemacs-mode-hook
                eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))

;; When something changes a file, automatically refresh the buffer containing it.
(global-auto-revert-mode t)

;; Visually indicate matching pairs of parentheses.
(show-paren-mode t)

;; global-hl-line-mode softly highlights the background color of the line containing point. It makes it a bit easier to find point, and it’s useful when pairing or presenting code.
(global-hl-line-mode 1)
(set-face-attribute hl-line-face nil :underline nil)

;; Set tab width to 4 spaces and Allman indentation (bsd) in C
(setq-default tab-width 4)
(setq-default indent-tabs-mode nil)
(setq c-default-style "bsd"
      c-basic-offset 4)

#+end_src

* Who am I?

Personal information.

#+BEGIN_SRC emacs-lisp

(setq user-full-name "Patxi Madina"
          user-mail-address "pmdn@mailbox.org")

#+END_SRC

* Custom functions

Funtions to be used.

#+BEGIN_SRC  emacs-lisp

(defun hrs/append-to-path (path)
  "Add a path both to the $PATH variable and to Emacs' exec-path."
  (setenv "PATH" (concat (getenv "PATH") ":" path))
  (add-to-list 'exec-path path))

#+END_SRC

* Org Mode

[[https://orgmode.org/][Org Mode]] is one of the hallmark features of Emacs.  It is a rich document editor, project planner, task and time tracker, blogging engine, and literate coding utility all wrapped up in one package.

** Basic Config

This section contains the basic configuration for =org-mode=.

#+begin_src emacs-lisp

;; Org mode configuration
  (defun efs/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-date nil :inherit 'fixed-pitch)
    (visual-line-mode 1))

  (use-package org
    :pin org
    :hook (org-mode . efs/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")
    
;; Fix image width and show inline images
    (setq org-image-actual-width 500)
    (setq org-startup-with-inline-images t)
    
    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)

    (setq org-agenda-files
          '("~/Sync/Sincronizadas/Notes/OrgFiles/Notas.org"))

    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60)

    (setq org-todo-keywords
      '((sequence "TODO(t)" "ACTIVE(a)" "WAITING(w@/!)" "|" "DONE(d!)" "CANCELLED(c@)")))

    (setq org-todo-keyword-faces
     '(("TODO".(:foreground "DarkSeaGreen" :weight bold))
	   ("ACTIVE".(:foreground "MediumSeaGreen" :weight bold))
       ("WAITING".(:foreground "peru" :weight bold))
       ("DONE".(:foreground "azure" :weight bold))
       ("CANCELLED".(:foreground "IndianRed" :weight bold))))

   (setq org-refile-use-outline-path 'file)
   (setq org-outline-path-complete-in-steps nil)
    (setq org-refile-targets
      '(("Archive.org" :maxlevel . 1)
      (org-agenda-files :maxlevel . 9)))

    ;; Save Org buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    (setq org-tag-alist
      '((:startgroup)
         ; Put mutually exclusive tags here
         (:endgroup)
         ("@errand" . ?E)
         ("@home" . ?H)
         ("@work" . ?W)
         ("agenda" . ?a)
         ("planning" . ?p)
         ("publish" . ?P)
         ("batch" . ?b)
         ("note" . ?n)
         ("idea" . ?i)))

    ;; Configure custom agenda views
    (setq org-tags-match-list-sublevels 'indented)
    (setq org-agenda-custom-commands
     '(("d" "Dashboard"
       ((agenda "" ((org-deadline-warning-days 7)))
        (todo "TODO" ((org-agenda-overriding-header "Todo Tasks")))
        (todo "ACTIVE" ((org-agenda-overriding-header "Active Tasks")))
        (todo "WAITING" ((org-agenda-overriding-header "Waiting Tasks")))))
      
      ("w" "Workflow Status"
       ((todo "TODO"
              ((org-agenda-overriding-header "Todo")
               (org-agenda-files org-agenda-files)))
        (todo "WAITING"
              ((org-agenda-overriding-header "Waiting on External")
               (org-agenda-files org-agenda-files)))
        (todo "ACTIVE"
              ((org-agenda-overriding-header "Active Tasks")
               (org-agenda-files org-agenda-files)))
        (todo "DONE"
              ((org-agenda-overriding-header "Completed Tasks")
               (org-agenda-files org-agenda-files)))
        (todo "CANCELLED"
              ((org-agenda-overriding-header "Cancelled Tasks")
               (org-agenda-files org-agenda-files)))))))

    ;; Capture templates
    (setq org-capture-templates
	   `(("q" "Quick Notes")
          ("qq" "Note" entry (file+olp "~/Sync/Sincronizadas/Notes/OrgFiles/Notas.org" "Inbox")
              "* %?\n  %U\n  %i" :empty-lines 1)))

    ;; Set global key for capture
    (define-key global-map (kbd "C-c q")
      (lambda () (interactive) (org-capture nil "qq"))))

#+end_src

** Nicer Heading Bullets

[[https://github.com/sabof/org-bullets][org-bullets]] replaces the heading stars in =org-mode= buffers with nicer looking characters that you can control.  Another option for this is [[https://github.com/integral-dw/org-superstar-mode][org-superstar-mode]].

#+begin_src emacs-lisp

(use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

** Configure Babel Languages

To execute or export code in =org-mode= code blocks, you'll need to set up =org-babel-load-languages= for each language you'd like to use.  [[https://orgmode.org/worg/org-contrib/babel/languages.html][This page]] documents all of the languages that you can use with =org-babel=.

#+begin_src emacs-lisp

(org-babel-do-load-languages
  'org-babel-load-languages
  '((emacs-lisp . t)
    (python . t)))

(push '("conf-unix" . conf-unix) org-src-lang-modes)

#+end_src

** Structure Templates

Org Mode's [[https://orgmode.org/manual/Structure-Templates.html][structure templates]] feature enables you to quickly insert code blocks into your Org files in combination with =org-tempo= by typing =<= followed by the template name like =el= or =py= and then press =TAB=.  For example, to insert an empty =emacs-lisp= block below, you can type =<el= and press =TAB= to expand into such a block.

You can add more =src= block templates below by copying one of the lines and changing the two strings at the end, the first to be the template name and the second to contain the name of the language [[https://orgmode.org/worg/org-contrib/babel/languages.html][as it is known by Org Babel]].

#+begin_src emacs-lisp

;;(with-eval-after-load 'org
  ;; This is needed as of Org 9.2
 ;; (require 'org-tempo)

  ;;(add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  ;;(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  ;;(add-to-list 'org-structure-template-alist '("py" . "src python")))

#+end_src

** Auto-tangle Configuration Files

This snippet adds a hook to =org-mode= buffers so that =efs/org-babel-tangle-config= gets executed each time such a buffer gets saved.  This function checks to see if the file being saved is the Emacs.org file you're looking at right now, and if so, automatically exports the configuration here to the associated output files.

#+begin_src emacs-lisp

;; Automatically tangle our Emacs.org config file when we save it
(defun efs/org-babel-tangle-config ()
  (when (string-equal (buffer-file-name)
                      (expand-file-name "~/.dotfiles/.emacs.d/Emacs.org"))
    ;; Dynamic scoping to the rescue
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))

#+end_src

** Org download

[[https://github.com/abo-abo/org-download][org-download]]  facilitates inserting images into org files.

#+BEGIN_SRC  emacs-lisp

(use-package org-download
  :ensure t
  :custom
    (org-download-method 'directory)
    (org-download-image-dir "images")
    (org-download-heading-lvl nil)
    (org-download-timestamp "%Y%m%d-%H%M%S_")
  :config
  ;; add support to dired
  (add-hook 'dired-mode-hook 'org-download-enable))

#+END_SRC

* Directory organizing
This sections makes sure the directory stays organized

#+begin_src emacs-lisp

;; Custom command stored on its own file
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(when (file-exists-p custom-file)
  (load custom-file))
;; Back-up directories
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))

#+end_src

* Key bindings

In this section global key bindings are added.

#+begin_src emacs-lisp

;; Make ESC quit prompts
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
(global-set-key (kbd "C-c a") 'org-agenda)
#+end_src

* UI configurations

** Color theme

Default themes may be good options:

;(load-theme 'misterioso)

[[https://github.com/hlissner/emacs-doom-themes][doom-themes]] is a great set of themes with a lot of variety and support for many different Emacs modes.  Taking a look at the [[https://github.com/hlissner/emacs-doom-themes/tree/screenshots][screenshots]] might help you decide which one you like best.  You can also run =M-x counsel-load-theme= to choose between them easily.

#+begin_src emacs-lisp

(use-package doom-themes
  :init (load-theme 'doom-nord t))

#+end_src

[[https://github.com/owainlewis/emacs-color-themes][Emacs color themes]]  is a package of themes named after influential programmers. Spolsky is a good one.

#+BEGIN_SRC  emacs-lisp

(use-package sublime-themes)

#+END_SRC



** Better Modeline

[[https://github.com/seagle0128/doom-modeline][doom-modeline]] is a very attractive and rich (yet still minimal) mode line configuration for Emacs.  The default configuration is quite good but you can check out the [[https://github.com/seagle0128/doom-modeline#customize][configuration options]] for more things you can enable or disable.

*NOTE:* The first time you load your configuration on a new machine, you'll need to run `M-x all-the-icons-install-fonts` so that mode line icons display correctly.

#+begin_src emacs-lisp

(use-package all-the-icons)

(use-package doom-modeline
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 13)
    (doom-modeline-buffer-file-name-style 'truncate-except-project)
    (doom-modeline-bar-width 6)))

#+end_src
** Diminish  

[[https://github.com/emacsmirror/diminish][Diminish]] implements hiding or abbreviation of the mode line displays (lighters) of minor-modes.

#+begin_src emacs-lisp

;; Diminish minor modes
(use-package diminish
  :ensure t)

#+end_src

** Ivy

[[https://oremacs.com/swiper/][Ivy]] is an excellent completion framework for Emacs.  It provides a minimal yet powerful selection menu that appears when you open files, switch buffers, and for many other tasks in Emacs.  Counsel is a customized set of commands to replace `find-file` with `counsel-find-file`, etc which provide useful commands for each of the default completion commands.

[[https://github.com/Yevgnen/ivy-rich][ivy-rich]] adds extra columns to a few of the Counsel commands to provide more information about each item.

#+begin_src emacs-lisp

;; Ivy / Counsel / Swiper configuration. Counsel contains the rest.
(use-package counsel
  :diminish ivy-mode
  :demand
  :bind (("C-s" . swiper)
	 ("M-x" . counsel-M-x)
	 ("C-x C-f" . counsel-find-file)
	 ("C-c C-r" . iny-resume)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)	
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))

;; Enrich Ivy
(use-package ivy-rich
  :after ivy
  :init
  (ivy-rich-mode 1))

#+end_src

** Which Key

[[https://github.com/justbur/emacs-which-key][which-key]] is a useful UI panel that appears when you start pressing any key binding in Emacs to offer you all possible completions for the prefix.  For example, if you press =C-c= (hold control and press the letter =c=), a panel will appear at the bottom of the frame displaying all of the bindings under that prefix and which command they run.  This is very useful for learning the possible key bindings in the mode of your current buffer.

#+begin_src emacs-lisp

;; To show next commands
(use-package which-key
  :defer 0
  :diminish which-key-mode
  :config
  (which-key-mode)
  (setq which-key-idle-delay 0.5))

#+end_src

** Dashboard

[[https://github.com/emacs-dashboard/emacs-dashboard][Dashboard]] is an extensible emacs startup screen showing you what’s most important.

#+BEGIN_SRC emacs-lisp

  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    ; set the title
    (setq dashboard-banner-logo-title "Bienvenido a Emacs!")
    ; set the banner
    (setq dashboard-startup-banner 'logo)
    ; set the sections I'd like displayed and how many of each
    (setq dashboard-items '((recents . 5) (projects . 5) (bookmarks . 5)))
    ; center it all
    (setq dashboard-center-content t)
    ; don't show shortcut keys
    (setq dashboard-show-shortcuts t)
    ; use nice icons for the files
    (setq dashboard-set-file-icons t)
    ; use nice section icons
    (setq dashboard-set-heading-icons t)
    ; disable the snarky footer
    (setq dashboard-set-footer nil))

#+END_SRC

** Company

[[https://company-mode.github.io/][Company]] is a text completion framework for Emacs. The name stands for "complete anything". It uses pluggable back-ends and front-ends to retrieve and display completion candidates.

#+BEGIN_SRC  emacs-lisp

(use-package company
  :custom
  (company-idle-delay 0)
  (company-tooltip-align-annotations t)
  :config
  (add-hook 'prog-mode-hook 'company-mode))


#+END_SRC
* Development

** Magit

[[https://magit.vc/][Magit]] is the best Git interface I've ever used.  Common Git operations are easy to execute quickly using Magit's command panel system.

#+BEGIN_SRC emacs-lisp

;; Magit for git
(use-package magit
  :ensure t
  :bind (("C-x g" . magit-status)))

#+END_SRC

** GitGutter

[[https://github.com/emacsorphanage/git-gutter][GitGutter]] is a pluggin to show information about files in a git repository.

#+BEGIN_SRC emacs-lisp

;; Git gutter.Show git changes.
(use-package git-gutter
  :ensure t
  :defer 0.3
  :diminish git-gutter-mode
  :delight
  :init (global-git-gutter-mode))

#+END_SRC

** Projectile

[[https://projectile.mx/][Projectile]] is a project management library for Emacs which makes it a lot easier to navigate around code projects for various languages.  Many packages integrate with Projectile so it's a good idea to have it installed even if you don't use its commands directly.

#+BEGIN_SRC emacs-lisp

;; Pojectile for working with projects
(use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :custom ((projectile-completion-system 'ivy))
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  ;; NOTE: Set this to the folder where you keep your Git repos!
  (when (file-directory-p "~/Projects/Code")
    (setq projectile-project-search-path '("~/Projects/Code")))
  (setq projectile-switch-project-action #'projectile-dired))

(use-package counsel-projectile
  :after projectile
  :config (counsel-projectile-mode))

#+END_SRC

** Rainbow delimiter

[[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] is useful in programming modes because it colorizes nested parentheses and brackets according to their nesting depth.  This makes it a lot easier to visually match parentheses in Emacs Lisp code without having to count them yourself.

#+BEGIN_SRC emacs-lisp

;; Easier to see if parenthesis are well closed
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

#+END_SRC

** Htmlize

[[https://github.com/hniksic/emacs-htmlize][Htmlize]] converts the buffer text and the associated decorations to HTML

#+BEGIN_SRC emacs-lisp

;; Htmlize. To retain code coloring at html export
(use-package htmlize
  :ensure t)
  
;; To retain the background color of the used theme

(defun my/org-inline-css-hook (exporter)
  "Insert custom inline css to automatically set the
background of code to whatever theme I'm using's background"
  (when (eq exporter 'html)
    (let* ((my-pre-bg (face-background 'default))
           (my-pre-fg (face-foreground 'default)))
      (setq
       org-html-head-extra
       (concat
        org-html-head-extra
        (format "<style type=\"text/css\">\n pre.src {background-color: %s; color: %s;}</style>\n"
                my-pre-bg my-pre-fg))))))

(add-hook 'org-export-before-processing-hook 'my/org-inline-css-hook)

#+END_SRC

** Flycheck

[[https://www.flycheck.org/en/latest/][FLycheck]] is a modern on-the-fly syntax checking extension for GNU Emacs.

#+begin_src emacs-lisp

(use-package flycheck
 :init (global-flycheck-mode)) 
  
#+end_src
** Python

Make sure you install virtualenv by: ~sudo apt install virtualenv~
Also install pip: ~sudo apt install python3-pip~
And also install pep8: ~pip3 install autopep8~
And jedi: ~pip3 install jedi~ 
And flake8: ~sudo apt install flake8~


Set interpreter to python 3.

#+BEGIN_SRC  emacs-lisp

(setq py-interpreter "python3")
(setq elpy-rpc-python-command "python3")
(setq org-babel-python-command "python3")

#+END_SRC


#+begin_src emacs-lisp
  (use-package python-mode)
#+end_src

Add =~/.local/bin= to load path. That’s where ~virtualenv~ is installed, and we’ll need that for ~jedi~.

#+BEGIN_SRC  emacs-lisp

(hrs/append-to-path "~/.local/bin")

#+END_SRC

Enable =elpy=. This provides automatic indentation, auto-completion, syntax
checking, etc.

#+begin_src emacs-lisp
  (use-package elpy)
  (elpy-enable)
#+end_src

Use =flycheck= for syntax checking:

#+begin_src emacs-lisp
  (add-hook 'elpy-mode-hook 'flycheck-mode)
#+end_src

Format code according to PEP8 on save:

#+begin_src emacs-lisp

  (use-package py-autopep8)
  (require 'py-autopep8)
  (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)

#+end_src

Configure Jedi along with the associated company mode:

#+BEGIN_SRC  emacs-lisp

(use-package company-jedi)
(add-to-list 'company-backends 'company-jedi)

(add-hook 'python-mode-hook 'jedi:setup)
(setq jedi:complete-on-dot t)

#+END_SRC

* RSS with Elfeed

 [[https://github.com/skeeto/elfeed][Elfeed]] is a RSS reader integrated in Emacs. Together with [[https://github.com/remyhonig/elfeed-org][Elfeed-org]] makes adding feeds and reading them a joy.

#+BEGIN_SRC emacs-lisp

  ;; Configure Elfeed
  (use-package elfeed
    :ensure t
    :config
    (setq elfeed-db-directory (expand-file-name "elfeed" user-emacs-directory)
          elfeed-show-entry-switch 'display-buffer)
    (setq elfeed-search-filter "@1-months-ago +unread")
    :bind
    ("C-x w" . elfeed ))

  ;; Configure Elfeed with org mode
   (use-package elfeed-org
     :ensure t
     :config
     (elfeed-org)
     (setq rmh-elfeed-org-files (list "~/Sync/Sincronizadas/Notes/OrgFiles/elfeed.org")))

#+END_SRC

